Things to add:
abstract

clear definition of problem and motivation 

adapt proposal -> introduction stuff
background work: cm-sketch, hokusai (algorithm), specific twitter trending work: ? 
http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6137387&tag=1 
(this is the closest we could find)
(to the best of our knowledge, this work has not been done before)

to note: our goal was to make a real time query algorithm that USES
the history (in condensed form) to help understand current time 
we're remembering the past with less accuracy to save space (realistic model)
in order to get good estimates of present trending

this means we are not trying to query the past the way Hokusai is.

how did we approach it 
overview

data structures
description
-- fib heap
-- queue
-- frequency hash table
-- History (own subsection)

algorithms
description
- make sure changes in implementation are reflected in algorithm 
-- querying the (History)
-- updating the data structure
------ adding to the data structure
----------- frequency hash table update/ heap update / (update history every time block - mention why we can add, etc, some of the theory from the Hokusai paper)
------ removing from the data structure (our snapshot of the present)
----------- every time unit of the present, we remove outdated frequencies
-- top k hashtags (real time)

runtime analysis
space analysis
accuracy analysis


-- key function for heap discussion 
-- a guiding metric in our choice of heap key function was to 
get some spread, i.e. not everythign was 1.0 in priority. 
(rationale: if everything is 1.0, everything is trending, that's no good)
-- method of choosing, analysis (talk about in design choices as well)
-- freq/ history
-- freq/ (history)^p: p = 1.3? : this is not good, everything goes to 1
-- different parameter choices affect error: more error makes more random -> more spread
-- the space-saving actually had a side-effect of adding some smoothing error, which made
the increased space efficiency actually beneficial for the trend-detection application 
-- (with higher error it worked better; when we got more precise, it worked worse)


design choices for data structure
-- data structure modification (History vs Hokusai)
-- fibonacci heap 
-- heap key function 

justification


results

naive algorithm serves as comparison
description of naive

the results

future work

references